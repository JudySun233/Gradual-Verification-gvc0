
Decider: adding path condition terms ListSet((== (Second: $t@1@00) _))
Decider: adding path condition terms ListSet((== (Second: $t@2@00) _))
Decider: adding path condition terms ListSet((== (Second: $t@6@00) _))
Decider: adding path condition terms ListSet((== (Second: $t@7@00) _))
Decider: adding path condition terms ListSet((== (Second: $t@12@00) _))
Decider: adding path condition terms ListSet((== (Second: $t@13@00) _))
Decider: adding path condition terms ListSet((== (Second: $t@4@06) _))
Decider: adding path condition terms ListSet((== (Second: $t@2@04) _))
Decider: adding path condition terms ListSet((== (Second: $t@5@06) _))
Decider: adding path condition terms ListSet((== (Second: $t@12@08) _))
Decider: adding path condition terms ListSet((== (Second: $t@6@05) _))
Decider: adding path condition terms ListSet((== (Second: $t@3@04) _))
Decider: adding path condition terms ListSet((== (Second: $t@13@08) _))
Decider: adding path condition terms ListSet((== (Second: $t@7@05) _))
Decider: adding path condition terms ListSet((== (Second: $t@14@07) _))
Decider: adding path condition terms ListSet((== (Second: $t@15@07) _))
Decider: adding path condition terms ListSet((== (Second: $t@6@06) _))
Decider: adding path condition terms ListSet((== (Second: $t@4@04) _))
Decider: adding path condition terms ListSet((== (Second: $t@8@05) _))
Decider: adding path condition terms ListSet((== (Second: $t@16@07) _))
Decider: adding path condition terms ListSet((== (Second: $t@14@08) _))
Decider: adding path condition terms ListSet((== (Second: $t@5@04) _))
Decider: adding path condition terms ListSet((== (Second: $t@7@06) _))
Decider: adding path condition terms ListSet((== (Second: $t@17@07) _))
Decider: adding path condition terms ListSet((== (Second: $t@9@05) _))
Decider: adding path condition terms ListSet((! (== n@9@06 Null)))
Decider: adding path condition terms ListSet((! (== n@9@06 $result@3@06)))
Field assignment: n.Node$val := val
Permissions before eval: List(n.Node$val, n.Node$next)
Setting method call AST node in state: l := create_list(3)
Permissions before consume: List(n.Node$val, n.Node$next)
Potential location after loop unset
Decider: adding path condition terms ListSet((! (== b@8@07 c@9@07)))
Decider: adding path condition terms ListSet((== list@3@05 Null))
Potential location after loop unset
Decider: adding path condition terms ListSet((! (== a@7@07 b@8@07)))
Decider: adding path condition terms ListSet((! (== list@3@05 Null)))
Decider: adding path condition terms ListSet((== b@7@08.Node$val@15@08 bVal@10@08))
Decider: adding path condition terms ListSet((== (Second: $t@16@08) _))
Decider: adding path condition terms ListSet((== (Second: $t@11@04) _))
Unsetting method call AST node in state: Some(l := create_list(3))
Decider: adding path condition terms ListSet((== b@7@08.Node$val@17@08 bVal@10@08))
Setting method call AST node in state: l1 := list_insert(l, 4)
Potential location after loop unset
Decider: adding path condition terms ListSet((== (Second: $t@13@04) _))
Unsetting method call AST node in state: Some(l1 := list_insert(l, 4))
Decider: adding path condition terms ListSet((! (== b@7@08 c@8@08)))
Potential location after loop unset
Permissions before produce: List(n.Node$next, n.Node$next)
New chunk: n@9@06.Node$val -> val@2@06 # W
Setting method call AST node in state: l11 := list_insert(l1, -1)
Permissions after produce: List(n.Node$val, n.Node$next, n.Node$next)
Field assignment: n.Node$next := null
Permissions before eval: List(n.Node$val, n.Node$next, n.Node$next)
Permissions before consume: List(n.Node$val, n.Node$next, n.Node$next)
Decider: adding path condition terms ListSet((! (== a@6@08 b@7@08)))
Decider: adding path condition terms ListSet((== (Second: $t@15@04) _))
Unsetting method call AST node in state: Some(l11 := list_insert(l1, -1))
Permissions before produce: List(n.Node$val, n.Node$val)
New chunk: n@9@06.Node$next -> Null # W
Permissions after produce: List(n.Node$next, n.Node$val, n.Node$val)
Setting method call AST node in state: l111 := list_insert(l11, 10)
Decider: adding path condition terms ListSet((== (Second: $t@17@04) _))
Unsetting method call AST node in state: Some(l111 := list_insert(l11, 10))
Decider: adding path condition terms ListSet((! (== a@7@07 Null)))
Decider: adding path condition terms ListSet((! (== a@6@08 Null)))
Setting method call AST node in state: appendLemmaAfterLoopBody(a.Node$next, b, c, a.Node$val, bVal, cVal)
Setting method call AST node in state: appendLemmaLoopBody(a.Node$next, b, c, a.Node$val, cPrev, bVal, cVal)
Decider: adding path condition terms ListSet((== (Second: $t@20@08) _))
Decider: adding path condition terms ListSet((== (Second: $t@20@07) _))
Unsetting method call AST node in state: Some(appendLemmaLoopBody(a.Node$next, b, c, a.Node$val, cPrev, bVal, cVal))
Decider: adding path condition terms ListSet((== b@7@08.Node$val@21@08 bVal@10@08))
Unsetting method call AST node in state: Some(appendLemmaAfterLoopBody(a.Node$next, b, c, a.Node$val, bVal, cVal))
Decider: adding path condition terms ListSet((== a@7@07 b@8@07))
Potential location after loop unset
Decider: adding path condition terms ListSet((== a@7@07 b@8@07))
Decider: adding path condition terms ListSet((! (== a@7@07 b@8@07)))
Decider: adding path condition terms ListSet((== b@8@07 c@9@07))
Potential location after loop unset
Decider: adding path condition terms ListSet((== b@8@07 c@9@07))
Decider: adding path condition terms ListSet((! (== b@8@07 c@9@07)))
Decider: adding path condition terms ListSet((== b@7@08.Node$val@22@08 bVal@10@08))
Consume expression: Adding runtime check Some(bVal == bVal)
Decider: adding path condition terms ListSet((== a@6@08 b@7@08))
Potential location after loop unset
Decider: adding path condition terms ListSet((== a@6@08 b@7@08))
Decider: adding path condition terms ListSet((== b@7@08.Node$val@23@08 bVal@10@08))
Consume expression: Adding runtime check Some(bVal == bVal)
Decider: adding path condition terms ListSet((! (== a@6@08 b@7@08)))
Decider: adding path condition terms ListSet((== b@7@08 c@8@08))
Potential location after loop unset
Decider: adding path condition terms ListSet((== b@7@08 c@8@08))
Decider: adding path condition terms ListSet((== b@7@08.Node$val@24@08 bVal@10@08))
Consume expression: Adding runtime check Some(bVal == bVal)
Decider: adding path condition terms ListSet((! (== b@7@08 c@8@08)))
Verification aborted exceptionally: java.util.concurrent.ExecutionException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: State merging failed: unexpected mismatch between symbolic states
  Cause: java.util.concurrent.ExecutionException: java.lang.RuntimeException: State merging failed: unexpected mismatch between symbolic states
Verification errors:
Verification aborted exceptionally