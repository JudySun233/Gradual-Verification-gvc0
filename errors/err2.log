
Decider: adding path condition terms ListSet((== $t@1@00 ((First: $t@1@00), (Second: $t@1@00))))
Decider: adding path condition terms ListSet((== (Second: (First: $t@1@00)) _))
Decider: adding path condition terms ListSet((! (== node@0@00 Null)))
Decider: adding path condition terms ListSet((== $t@2@00 ((First: $t@2@00), (Second: $t@2@00))))
Decider: adding path condition terms ListSet((== (Second: (First: $t@2@00)) _))
Decider: adding path condition terms ListSet((== (Second: $t@2@08) _))
Decider: adding path condition terms ListSet((== (Second: $t@3@08) _))
Decider: adding path condition terms ListSet((== (Second: $t@4@08) _))
Decider: adding path condition terms ListSet((== (Second: $t@5@08) _))
Decider: adding path condition terms ListSet((! (== a@10@08 Null)))
Decider: adding path condition terms ListSet((! (== b@13@08 Null)))
Decider: adding path condition terms ListSet((! (== b@13@08 a@10@08)), (! (== b@13@08 Node$next@12@08)))
Decider: adding path condition terms ListSet((! (== c@16@08 Null)))
Decider: adding path condition terms ListSet((! (== c@16@08 b@13@08)), (! (== c@16@08 a@10@08)), (! (== c@16@08 Node$next@12@08)), (! (== c@16@08 Node$next@15@08)))
Field assignment: a.Node$next := null
Permissions before eval: List(a.Node$value, a.Node$next, b.Node$value, b.Node$next, c.Node$value, c.Node$next)
Permissions before consume: List(a.Node$value, a.Node$next, b.Node$value, b.Node$next, c.Node$value, c.Node$next)
Decider: adding path condition terms ListSet((== $t@14@07 ((First: $t@14@07), (Second: $t@14@07))))
Decider: adding path condition terms ListSet((== (Second: (First: $t@14@07)) _))
Decider: adding path condition terms ListSet((! (== a@4@07 Null)))
Unsetting unfold AST node in state: Some(unfold acc(wrappedAcc(a), write))
Decider: adding path condition terms ListSet(wrappedAcc%trigger($t@14@07, a@4@07))
Decider: adding path condition terms ListSet((== $t@16@07 ((First: $t@16@07), (Second: $t@16@07))))
Decider: adding path condition terms ListSet((== (Second: (First: $t@16@07)) _))
Decider: adding path condition terms ListSet((! (== c@6@07 Null)))
Unsetting unfold AST node in state: Some(unfold acc(wrappedAcc(c), write))
Decider: adding path condition terms ListSet(wrappedAcc%trigger($t@16@07, c@6@07))
Decider: adding path condition terms ListSet((! (== b@5@07 Null)))
Decider: adding path condition terms ListSet((== sum@20@07 (+ (+ a@4@07.Node$value@17@07 b@5@07.Node$value@18@07) c@6@07.Node$value@19@07)))
Setting fold AST node in state: Some(fold acc(wrappedAcc(a), write))
Decider: adding path condition terms ListSet((and (and (! (== a@10@08 b@13@08)) (! (== a@10@08 c@16@08))) (and (! (== b@13@08 a@10@08)) (! (== b@13@08 c@16@08))) (and (! (== c@16@08 a@10@08)) (! (== c@16@08 b@13@08)))))
Decider: adding path condition terms ListSet((and (and (! (== a@10@08 b@13@08)) (! (== a@10@08 c@16@08))) (and (! (== b@13@08 a@10@08)) (! (== b@13@08 c@16@08))) (and (! (== c@16@08 a@10@08)) (! (== c@16@08 b@13@08)))))
Permissions before produce: List(a.Node$value, b.Node$value, b.Node$next, c.Node$value, c.Node$next, a.Node$value, b.Node$value, b.Node$next, c.Node$value, c.Node$next)
New chunk: a@10@08.Node$next -> Null # W
Permissions after produce: List(a.Node$next, c.Node$next, c.Node$value, b.Node$next, b.Node$value, a.Node$value, a.Node$value, b.Node$value, b.Node$next, c.Node$value, c.Node$next)
Field assignment: b.Node$next := null
Permissions before eval: List(a.Node$next, c.Node$next, c.Node$value, b.Node$next, b.Node$value, a.Node$value, a.Node$value, b.Node$value, b.Node$next, c.Node$value, c.Node$next)
Permissions before consume: List(a.Node$next, c.Node$next, c.Node$value, b.Node$next, b.Node$value, a.Node$value, a.Node$value, b.Node$value, b.Node$next, c.Node$value, c.Node$next)
Decider: adding path condition terms ListSet((and (and (and (! (== a@10@08 c@16@08)) (! (== a@10@08 b@13@08))) (and (! (== c@16@08 a@10@08)) (! (== c@16@08 b@13@08))) (and (! (== b@13@08 a@10@08)) (! (== b@13@08 c@16@08)))) (and (and (! (== c@16@08 b@13@08)) (! (== c@16@08 a@10@08))) (and (! (== b@13@08 c@16@08)) (! (== b@13@08 a@10@08))) (and (! (== a@10@08 c@16@08)) (! (== a@10@08 b@13@08))))))
Decider: adding path condition terms ListSet((and (and (and (! (== a@10@08 c@16@08)) (! (== a@10@08 b@13@08))) (and (! (== c@16@08 a@10@08)) (! (== c@16@08 b@13@08))) (and (! (== b@13@08 a@10@08)) (! (== b@13@08 c@16@08)))) (and (and (! (== c@16@08 b@13@08)) (! (== c@16@08 a@10@08))) (and (! (== b@13@08 c@16@08)) (! (== b@13@08 a@10@08))) (and (! (== a@10@08 c@16@08)) (! (== a@10@08 b@13@08))))))
Permissions before produce: List(a.Node$next, c.Node$next, c.Node$value, b.Node$value, a.Node$value, a.Node$next, c.Node$next, c.Node$value, b.Node$value, a.Node$value)
New chunk: b@13@08.Node$next -> Null # W
Permissions after produce: List(b.Node$next, a.Node$value, b.Node$value, c.Node$value, c.Node$next, a.Node$next, a.Node$next, c.Node$next, c.Node$value, b.Node$value, a.Node$value)
Field assignment: c.Node$next := null
Permissions before eval: List(b.Node$next, a.Node$value, b.Node$value, c.Node$value, c.Node$next, a.Node$next, a.Node$next, c.Node$next, c.Node$value, b.Node$value, a.Node$value)
Permissions before consume: List(b.Node$next, a.Node$value, b.Node$value, c.Node$value, c.Node$next, a.Node$next, a.Node$next, c.Node$next, c.Node$value, b.Node$value, a.Node$value)
Decider: adding path condition terms ListSet((and (and (and (! (== b@13@08 c@16@08)) (! (== b@13@08 a@10@08))) (and (! (== c@16@08 b@13@08)) (! (== c@16@08 a@10@08))) (and (! (== a@10@08 b@13@08)) (! (== a@10@08 c@16@08)))) (and (and (! (== a@10@08 b@13@08)) (! (== a@10@08 c@16@08))) (and (! (== b@13@08 a@10@08)) (! (== b@13@08 c@16@08))) (and (! (== c@16@08 a@10@08)) (! (== c@16@08 b@13@08))))))
Decider: adding path condition terms ListSet((and (and (and (! (== b@13@08 c@16@08)) (! (== b@13@08 a@10@08))) (and (! (== c@16@08 b@13@08)) (! (== c@16@08 a@10@08))) (and (! (== a@10@08 b@13@08)) (! (== a@10@08 c@16@08)))) (and (and (! (== a@10@08 b@13@08)) (! (== a@10@08 c@16@08))) (and (! (== b@13@08 a@10@08)) (! (== b@13@08 c@16@08))) (and (! (== c@16@08 a@10@08)) (! (== c@16@08 b@13@08))))))
Permissions before produce: List(b.Node$next, a.Node$value, b.Node$value, c.Node$value, a.Node$next, b.Node$next, a.Node$value, b.Node$value, c.Node$value, a.Node$next)
New chunk: c@16@08.Node$next -> Null # W
Permissions after produce: List(c.Node$next, a.Node$next, c.Node$value, b.Node$value, a.Node$value, b.Node$next, b.Node$next, a.Node$value, b.Node$value, c.Node$value, a.Node$next)
Decider: adding path condition terms ListSet((and (and (and (! (== c@16@08 a@10@08)) (! (== c@16@08 b@13@08))) (and (! (== a@10@08 c@16@08)) (! (== a@10@08 b@13@08))) (and (! (== b@13@08 c@16@08)) (! (== b@13@08 a@10@08)))) (and (and (! (== c@16@08 b@13@08)) (! (== c@16@08 a@10@08))) (and (! (== b@13@08 c@16@08)) (! (== b@13@08 a@10@08))) (and (! (== a@10@08 c@16@08)) (! (== a@10@08 b@13@08))))))
Decider: adding path condition terms ListSet((and (and (and (! (== c@16@08 a@10@08)) (! (== c@16@08 b@13@08))) (and (! (== a@10@08 c@16@08)) (! (== a@10@08 b@13@08))) (and (! (== b@13@08 c@16@08)) (! (== b@13@08 a@10@08)))) (and (and (! (== c@16@08 b@13@08)) (! (== c@16@08 a@10@08))) (and (! (== b@13@08 c@16@08)) (! (== b@13@08 a@10@08))) (and (! (== a@10@08 c@16@08)) (! (== a@10@08 b@13@08))))))
Decider: adding path condition terms ListSet((and (and (and (! (== c@16@08 a@10@08)) (! (== c@16@08 b@13@08))) (and (! (== a@10@08 c@16@08)) (! (== a@10@08 b@13@08))) (and (! (== b@13@08 c@16@08)) (! (== b@13@08 a@10@08)))) (and (! (== c@16@08 b@13@08)) (! (== b@13@08 c@16@08)))))
Decider: adding path condition terms ListSet((and (and (and (! (== c@16@08 a@10@08)) (! (== c@16@08 b@13@08))) (and (! (== a@10@08 c@16@08)) (! (== a@10@08 b@13@08))) (and (! (== b@13@08 c@16@08)) (! (== b@13@08 a@10@08)))) (and (! (== c@16@08 b@13@08)) (! (== b@13@08 c@16@08)))))
Decider: adding path condition terms ListSet((== (Second: $t@19@08) ((First: (Second: $t@19@08)), (Second: (Second: $t@19@08)))))
Decider: adding path condition terms ListSet((== (Second: $t@20@08) ((First: (Second: $t@20@08)), (Second: (Second: $t@20@08)))))
Setting fold AST node in state: Some(fold acc(wrappedAcc(a), write))
Decider: adding path condition terms ListSet((and (and (and (! (== c@16@08 a@10@08)) (! (== c@16@08 b@13@08))) (and (! (== a@10@08 c@16@08)) (! (== a@10@08 b@13@08))) (and (! (== b@13@08 c@16@08)) (! (== b@13@08 a@10@08)))) (and (and (! (== c@16@08 b@13@08)) (! (== c@16@08 a@10@08))) (and (! (== b@13@08 c@16@08)) (! (== b@13@08 a@10@08))) (and (! (== a@10@08 c@16@08)) (! (== a@10@08 b@13@08))))))
Decider: adding path condition terms ListSet((and (and (and (! (== c@16@08 a@10@08)) (! (== c@16@08 b@13@08))) (and (! (== a@10@08 c@16@08)) (! (== a@10@08 b@13@08))) (and (! (== b@13@08 c@16@08)) (! (== b@13@08 a@10@08)))) (and (and (! (== c@16@08 b@13@08)) (! (== c@16@08 a@10@08))) (and (! (== b@13@08 c@16@08)) (! (== b@13@08 a@10@08))) (and (! (== a@10@08 c@16@08)) (! (== a@10@08 b@13@08))))))
Verification aborted exceptionally: java.util.concurrent.ExecutionException: java.util.concurrent.ExecutionException: scala.MatchError: ? && true (of class viper.silver.ast.ImpreciseExp)
  Cause: java.util.concurrent.ExecutionException: scala.MatchError: ? && true (of class viper.silver.ast.ImpreciseExp)
Verification errors:
Verification aborted exceptionally