#use "field_access.h0"
#use <conio>
#use <string>

bool test(string header, bool condition, string message){
    if(!condition){
        error(string_join(string_join(header, " - "), message));
        return false;
    }else{
        return true;
    }
}

bool testOwnedFieldsInitialization(string header){
    int * _id_counter = alloc(int);
    *(_id_counter) = 0;

    OwnedFields* fields = alloc(OwnedFields);
    initOwnedFields(fields, _id_counter);
    if(!test(header, fields->capacity > 0, "(initOwnedFields) OwnedFields must have a nonzero default capacity after intialization.")){
        return false;
    }
    if(!test(header, fields->length == 0, "(initOwnedFields) OwnedFields must have a length of zero after initialization.")){
        return false;
    }

    bool allNULL = true;
    for(int i = 0; i < fields->length; i+=1){
        if(fields->contents[i] != NULL){
            allNULL = false;
        }
    }
    if(!test(header, allNULL, "(initOwnedFields) The contents of OwnedFields must all be set to NULL after initialization.")){
        return false;
    }
    return true;
}

bool testStructCreation(string header){
    int * _id_counter = alloc(int);
    *(_id_counter) = 0;

    OwnedFields* fields = alloc(OwnedFields);
    initOwnedFields(fields, _id_counter);

    int _id = addStructAccess(fields, 80);

    for(int i = 0; i<80; i += 1){
        if(!assertAcc(fields, _id, i)){
            print("(addStructAccess) Failed to verify access to the fields of a newly created struct.");
            return false;
        }
    }
    return true;
}



bool testFieldAddition(string header){
    int * _id_counter = alloc(int);
    *(_id_counter) = 0;

    OwnedFields* fields_1 = alloc(OwnedFields);
    initOwnedFields(fields_1, _id_counter);

    OwnedFields* fields_2 = alloc(OwnedFields);
    initOwnedFields(fields_2, _id_counter);

    int _id = addStructAccess(fields_1, 4);

    addAccess(fields_2, _id, 4, 2);
    if(!assertAcc(fields_2, _id, 2)){
        print("(addAccess/assertAcc) Failed to add an arbitrary singular field access permission to an OwnedFields struct.");
        return false;
    }

    return true;
}



bool testJoinDisjoin(string header){
    int * _id_counter = alloc(int);
    *(_id_counter) = 0;

    int num_fields = 20;

    OwnedFields* source = alloc(OwnedFields);
    initOwnedFields(source, _id_counter);

    int _id_node_1 = addStructAccess(source, num_fields);
    int _id_node_2 = addStructAccess(source, num_fields);

    OwnedFields* fields_1 = alloc(OwnedFields);
    initOwnedFields(fields_1, _id_counter);

    OwnedFields* fields_2 = alloc(OwnedFields);
    initOwnedFields(fields_2, _id_counter);

    for(int i = 0; i<num_fields; i += 1){
        addAccess(fields_1, _id_node_1, num_fields, i);
        if(!assertAcc(fields_1, _id_node_1, i)){
            print("(addAccess/assertAcc) Failed to add permission to new OwnedFields from source OwnedFields.");
            return false;
        }

        addAccess(fields_2, _id_node_2, num_fields, i);
        if(!assertAcc(fields_2, _id_node_2, i)){
            print("(addAccess/assertAcc) Failed to add permission to new OwnedFields from source OwnedFields.");
            return false;
        }
    }

    join(fields_1, fields_2);

    if(!test(header, fields_1->length == 2, "(join) Target OwnedFields length is incorrect after joining.")){
        return false;
    }

    for(int i = 0; i<num_fields; i += 1){
        if(!assertAcc(fields_1, _id_node_1, i)){
            print("(join/assertAcc) Failed to preserve existing permissions after join.");
            return false;
        }
        if(!assertAcc(fields_1, _id_node_2, i)){
            print("(join/assertAcc) Failed to add new permissions from join.");
            return false;
        }
    }

    disjoin(fields_1, fields_2);

    if(!test(header, fields_1->length == 1, "(disjoin) Target OwnedFields length is incorrect after joining.")){
        return false;
    }

    for(int i = 0; i<num_fields; i += 1){
        if(!assertAcc(fields_1, _id_node_1, i)){
            print("(disjoin/assertAcc) Failed to preserve existing permissions after disjoin.");
            return false;
        }
        if(assertAcc(fields_1, _id_node_2, i)){
            print("(disjoin/assertAcc) Field permissions that should have been removed are still present after disjoining.");
            return false;
        }
    }

    return true;
}

int main() {
    int * _id_counter = alloc(int);
    *(_id_counter) = 0;
    if(testOwnedFieldsInitialization("OwnedFields Initialization")){
        println("PASS: OwnedFields Initialization");
    }else{
        println("FAIL: OwnedFields Initialization");
        return 1;
    }
    if(testStructCreation("Field Creation")){
        println("PASS: Field Creation");
    }else{
        println("FAIL: Field Creation");
        return 1;
    }
    if(testFieldAddition("Field Addition")){
        println("PASS: Field Addition");
    }else{
        println("FAIL: Field Addition");
        return 1;
    }
    if(testJoinDisjoin("Joining/Disjoining OwnedFields")){
        println("PASS: Joining/Disjoining OwnedFields");
    }else{
        println("FAIL: Joining/Disjoining OwnedFields");
        return 1;
    }
    return 0;
}
