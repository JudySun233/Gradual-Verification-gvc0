#use <runtime>
int main();
void test(int x, int y, struct OwnedFields* _ownedFields);
int testCall(int a, struct OwnedFields* _ownedFields);

int main()
{
  int* _instanceCounter = NULL;
  _instanceCounter = alloc(int);
  return 0;
}

void test(int x, int y, struct OwnedFields* _ownedFields)
{
  int z = 0;
  bool _cond_1 = false;
  bool _cond_2 = false;
  bool _cond_3 = false;
  bool _cond_4 = false;
  struct OwnedFields* _tempFields = NULL;
  _cond_1 = x > 1;
  if (x > 1)
  {
    _cond_2 = x > 2;
    if (x > 2)
    {
      _tempFields = initOwnedFields(_ownedFields->instanceCounter);
      z = testCall(y, _tempFields);
      join(_ownedFields, _tempFields);
      _cond_3 = y == 0;
      _cond_4 = z == 0;
      if (z == 0)
      {
        if (_cond_1 && _cond_2 && !_cond_3 && _cond_4 || _cond_1 && _cond_2 && _cond_3 && _cond_4)
        {
          assert(x > 3);
        }
      }
    }
  }
}

int testCall(int a, struct OwnedFields* _ownedFields)
{
  return a;
}
