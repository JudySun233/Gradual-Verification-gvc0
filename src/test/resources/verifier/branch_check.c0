int testCall(int a)
//@ensures a == 0 ? \result == 0 : true;
{
  return a;
}

void test(int x, int y)
//@requires ?;
{
  if (x > 1)
  {
    if (x > 2)
    {
      int z = testCall(y);
      //@assert z > 0;
    }
  }
}

void test2(int x, int y)
//@requires ?;
{
  if (x > 1)
  {
    if (x > 2)
    {
      //@assert x < 0;
    }
  }
}

// Should fail since both execution paths fail
/*
void test3(int x, int y)
//@requires ?;
{
  if (x > 2)
  {
    //@assert x < 0;
  } else {
    //@assert x > 2;
  }
}
*/

// Should succeed since one execution path succeeds: x <= 1
void test4(int x, int y)
//@requires ?;
{
  if (x > 1)
  {
    if (x > 2)
    {
      //@assert x < 0;
    } else {
      //@assert x > 2;
    }
  }
}

void test5(int x, int y)
//@requires ?;
{
  if (x > 1)
  { } else {
    //@assert x > 1;
  }
}

void test6(int x, int y)
//@requires ?;
{
  if (!(x > 1)) 
  {
    //@assert x <= 1;
  } else {
    //@assert x < 1;
  }
}

// Should fail on else branch due to no imprecision
/*
void test7(int x, int y)
//@requires true;
{
  if (!(x > 1)) 
  {
    //@assert x <= 1;
  } else {
    //@assert x < 1;
  }
}
*/

// Should succeed and force x <= 1 going into loop at run-time
void testWhile(int x, int y)
//@requires ?;
{
  while (x > 1)
    //@loop_invariant ?;
  {
     //@assert x < 0;
     x = x - 1;
  }
}

// Should fail since after loop fails
/*
void testWhile2(int x, int y)
//@requires ?;
{
  while (x > 1)
    //@loop_invariant ?;
  {
     x = x - 1;
  }
  //@assert x > 1;
}
*/

// Should fail since precise precondition to loop & static failure in loop body
/*
void testWhile3(int x, int y)
//@requires true;
{
  while (x > 1)
    //@loop_invariant ?;
  {
     //@assert x < 0;
     x = x - 1;
  }
}
*/

// Should fail since precise
/*
void testWhile4(int x, int y)
//@requires true;
{
  while (x > 1)
    //@loop_invariant true;
  {
     //@assert x < 0;
     x = x - 1;
  }
}
*/

// Should succeed; loop inv satisfies assert
void testWhile5(int x, int y)
//@requires true;
{
  while (x > 1)
    //@loop_invariant ? && true;
  {
     x = x - 1;
  }
  
  //@assert y == 3;
}

// Should succeed; precondition satisfies assert
void testWhile6(int x, int y)
//@requires ? && true;
{
  while (x > 1)
    //@loop_invariant true;
  {
     x = x - 1;
  }
  
  //@assert y == 3;
}

int main()
{
  return 0;
}
