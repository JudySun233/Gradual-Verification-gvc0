#use <runtime>
struct Node;

struct Node
{
  int val;
  struct Node* next;
  int _id;
};

void appendLemmaAfterLoopBody(struct Node* a, struct Node* b, struct Node* c, int aPrev, int bVal, int cVal, struct OwnedFields* _ownedFields);
int main();

void appendLemmaAfterLoopBody(struct Node* a, struct Node* b, struct Node* c, int aPrev, int bVal, int cVal, struct OwnedFields* _ownedFields)
  //@requires ? && (b == c ? true : b->val == bVal) && acc(c->val);
  //@ensures ? && true;
{
  bool _cond_1 = false;
  bool _cond_2 = false;
  bool _cond_3 = false;
  _cond_1 = b == c;
  _cond_2 = c == b;
  if (!(b == c))
  {
  }
  else
  {
    _cond_3 = !(a == c);
    if (a == b)
    {
    }
    else
    {
      if (_cond_1 && _cond_2 && _cond_2 && _cond_3)
      {
        assertAcc(_ownedFields, a->_id, 1, "Field access runtime check failed for struct Node.next");
        assertAcc(_ownedFields, a->_id, 0, "Field access runtime check failed for struct Node.val");
      }
      appendLemmaAfterLoopBody(a->next, b, c, a->val, bVal, cVal, _ownedFields);
    }
  }
}

int main()
  //@requires ? && true;
  //@ensures ?;
{
  struct Node* l = NULL;
  struct Node* l1 = NULL;
  struct Node* l11 = NULL;
  struct Node* l111 = NULL;
  int* _instanceCounter = NULL;
  _instanceCounter = alloc(int);
  l = NULL;
  l1 = NULL;
  l11 = NULL;
  l111 = NULL;
  return 0;
}
