#use <runtime>
struct Node;

struct Node
{
  int value;
  struct Node* next;
  int _id;
};

void add_wrappedAcc(struct Node* node, struct OwnedFields* _ownedFields);
int fullyImprecise(struct Node* a, struct OwnedFields* _ownedFields);
int fullyPrecise(struct Node* a, int* _instanceCounter);
int imprecisePostcondition(struct Node* a, struct OwnedFields* _ownedFields);
int imprecisePrecondition(struct Node* a, struct OwnedFields* _ownedFields);
int main();
void remove_wrappedAcc(struct Node* node, struct OwnedFields* _ownedFields);
void sep_wrappedAcc(struct Node* node, struct OwnedFields* _ownedFields);
void wrappedAcc(struct Node* node, struct OwnedFields* _ownedFields);

void add_wrappedAcc(struct Node* node, struct OwnedFields* _ownedFields)
{
  addAcc(_ownedFields, node->_id, 3, 0);
  addAcc(_ownedFields, node->_id, 3, 1);
}

int fullyImprecise(struct Node* a, struct OwnedFields* _ownedFields)
{
  assertAcc(_ownedFields, a->_id, 0, "Field access runtime check failed for struct Node.value");
  return a->value;
}

int fullyPrecise(struct Node* a, int* _instanceCounter)
{
  int _ = 0;
  struct OwnedFields* _ownedFields = NULL;
  struct OwnedFields* _tempFields = NULL;
  struct OwnedFields* _tempFields1 = NULL;
  _ownedFields = initOwnedFields(_instanceCounter);
  _tempFields1 = initOwnedFields(_instanceCounter);
  add_wrappedAcc(a, _tempFields1);
  remove_wrappedAcc(a, _ownedFields);
  _ = imprecisePostcondition(a, _tempFields1);
  join(_ownedFields, _tempFields1);
  _tempFields = initOwnedFields(_instanceCounter);
  wrappedAcc(a, _ownedFields);
  sep_wrappedAcc(a, _tempFields);
  return _;
}

int imprecisePostcondition(struct Node* a, struct OwnedFields* _ownedFields)
{
  return a->value;
}

int imprecisePrecondition(struct Node* a, struct OwnedFields* _ownedFields)
{
  assertAcc(_ownedFields, a->_id, 0, "Field access runtime check failed for struct Node.value");
  return a->value;
}

int main()
{
  struct Node* a = NULL;
  int _ = 0;
  int* _instanceCounter = NULL;
  _instanceCounter = alloc(int);
  a = alloc(struct Node);
  a->next = NULL;
  _ = fullyPrecise(a, _instanceCounter);
  return _;
}

void remove_wrappedAcc(struct Node* node, struct OwnedFields* _ownedFields)
{
  loseAcc(_ownedFields, node->_id, 0);
  loseAcc(_ownedFields, node->_id, 1);
}

void sep_wrappedAcc(struct Node* node, struct OwnedFields* _ownedFields)
{
  addAccEnsureSeparate(_ownedFields, node->_id, 0, 3, "Overlapping field permissions for struct Node.value");
  addAccEnsureSeparate(_ownedFields, node->_id, 1, 3, "Overlapping field permissions for struct Node.next");
}

void wrappedAcc(struct Node* node, struct OwnedFields* _ownedFields)
{
  assertAcc(_ownedFields, node->_id, 0, "Field access runtime check failed for struct Node.value");
  assertAcc(_ownedFields, node->_id, 1, "Field access runtime check failed for struct Node.next");
}
