/*
m.tree_remove_lemma_max.3.fold.pred_inst.106.125
m.tree_main_lemma_bst.4.unfold.pred_inst.36.44
m.tree_remove_helper.3.fold.pred_inst.78.94
m.tree_remove_helper.3.fold.pred_inst.86.102
m.tree_min_helper.3.fold.pred_inst.63.78
m.tree_max_helper.4.unfold.pred_inst.44.55
m.tree_remove_helper.0.assert.bool.84.100
m.tree_max.3.fold.pred_inst.41.50
m.tree_remove_lemma_left.3.fold.pred_inst.96.113
m.tree_max_helper.0.assert.bool.48.59
p.bstRemove.6.pred.bool.118.146
p.bstRemove.6.pred.bool.118.149
m.tree_remove_helper.1.pre.pred_inst.76.92
m.tree_remove_lemma_max.2.post.pred_inst.104.123
m.tree_min_helper.3.fold.pred_inst.62.77
m.create_tree.2.post.pred_inst.1.2
m.tree_remove_lemma_right.1.pre.bool.111.131
m.tree_remove.1.pre.pred_inst.72.88
m.tree_min_helper.4.unfold.pred_inst.61.76
m.tree_add_helper.4.unfold.pred_inst.18.26
m.tree_contains.3.fold.pred_inst.23.31
m.tree_contains_helper.4.unfold.pred_inst.26.34
m.create_tree_helper.2.post.pred_inst.4.6
m.tree_add_helper.1.pre.bool.16.22
p.treeRemove.6.pred.pred_inst.120.156
m.tree_max_helper.1.pre.bool.42.51
m.create_tree.3.fold.pred_inst.2.3
m.tree_max_helper.4.unfold.pred_inst.47.58
p.bstRemove.6.pred.pred_inst.118.148
m.tree_min_helper.2.post.pred_inst.60.75
m.tree_remove_lemma_left.1.pre.pred_inst.91.108
m.tree_remove_lemma_right.3.fold.pred_inst.116.137
m.tree_max_helper.1.pre.pred_inst.42.52
m.tree_min_helper.1.pre.bool.59.72
m.tree_min_lemma.4.unfold.pred_inst.70.86
*/
#use <runtime>
#use <stress>
struct Node;

struct Node
{
  int val;
  struct Node* left;
  struct Node* right;
  int _id;
};

void bst(struct Node* root, int min, int max, struct OwnedFields* _ownedFields);
void bstRemove(struct Node* root, int x, int min, int max, struct OwnedFields* _ownedFields);
struct Node* create_tree(int val, struct OwnedFields* _ownedFields);
struct Node* create_tree_helper(int val, int min, int max, struct OwnedFields* _ownedFields);
int main();
void sep_bst(struct Node* root, int min, int max, struct OwnedFields* _ownedFields);
void sep_tree(struct Node* root, struct OwnedFields* _ownedFields);
void tree(struct Node* root, struct OwnedFields* _ownedFields);
struct Node* tree_add(struct Node* root, int x, struct OwnedFields* _ownedFields);
struct Node* tree_add_helper(struct Node* root, int x, int min, int max, struct OwnedFields* _ownedFields);
bool tree_contains(struct Node* root, int x, struct OwnedFields* _ownedFields);
bool tree_contains_helper(struct Node* root, int x, int min, int max, struct OwnedFields* _ownedFields);
void tree_main_lemma(struct Node* root, int x, struct OwnedFields* _ownedFields);
void tree_main_lemma_bst(struct Node* root, int x, int min, int max, struct OwnedFields* _ownedFields);
int tree_max(struct Node* root, struct OwnedFields* _ownedFields);
int tree_max_helper(struct Node* root, int min, int max, struct OwnedFields* _ownedFields);
void tree_max_lemma(struct Node* root, int newMax, int min, int max, struct OwnedFields* _ownedFields);
int tree_min(struct Node* root, struct OwnedFields* _ownedFields);
int tree_min_helper(struct Node* root, int min, int max, struct OwnedFields* _ownedFields);
void tree_min_lemma(struct Node* root, int newMin, int min, int max, struct OwnedFields* _ownedFields);
struct Node* tree_remove(struct Node* root, int x, struct OwnedFields* _ownedFields);
struct Node* tree_remove_helper(struct Node* root, int x, int min, int max, struct OwnedFields* _ownedFields);
void tree_remove_lemma(struct Node* root, int min, int max, struct OwnedFields* _ownedFields);
void tree_remove_lemma_left(struct Node* l, int x, int min, int max, struct OwnedFields* _ownedFields);
void tree_remove_lemma_left2(struct Node* l, int newX, int x, int min, int max, struct OwnedFields* _ownedFields);
void tree_remove_lemma_max(struct Node* root, int x, int newMax, int min, int max, struct OwnedFields* _ownedFields);
void tree_remove_lemma_min(struct Node* root, int x, int newMin, int min, int max, struct OwnedFields* _ownedFields);
void tree_remove_lemma_right(struct Node* r, int x, int min, int max, struct OwnedFields* _ownedFields);

void bst(struct Node* root, int min, int max, struct OwnedFields* _ownedFields)
{
  if (root == NULL)
  {
    assert(true);
  }
  else
  {
    assert(true);
  }
}

void bstRemove(struct Node* root, int x, int min, int max, struct OwnedFields* _ownedFields)
{
  if (root == NULL)
  {
    assert(true);
  }
  else
  {
    assert(root->val != x);
    bstRemove(root->left, x, min, root->val - 1, _ownedFields);
  }
}

struct Node* create_tree(int val, struct OwnedFields* _ownedFields)
{
  struct Node* res = NULL;
  res = NULL;
  res = create_tree_helper(val, -2147483647, 2147483647, _ownedFields);
  return res;
}

struct Node* create_tree_helper(int val, int min, int max, struct OwnedFields* _ownedFields)
{
  struct Node* root = NULL;
  struct OwnedFields* _tempFields = NULL;
  root = NULL;
  root = alloc(struct Node);
  root->_id = addStructAcc(_ownedFields, 4);
  root->val = val;
  root->left = NULL;
  root->right = NULL;
  _tempFields = initOwnedFields(_ownedFields->instanceCounter);
  bst(root, min, max, _ownedFields);
  return root;
}

int main()
{
  int stress = 0;
  int seed = 0;
  int stressCaptured = 0;
  struct Node* t1 = NULL;
  int i = 0;
  int j = 0;
  int r = 0;
  int toAdd = 0;
  bool test = false;
  int r1 = 0;
  int toRemove = 0;
  bool test1 = false;
  struct Node* t11 = NULL;
  struct Node* t12 = NULL;
  bool _cond_1 = false;
  bool _cond_2 = false;
  bool _cond_3 = false;
  int* _instanceCounter = NULL;
  struct OwnedFields* _ownedFields = NULL;
  struct OwnedFields* _tempFields = NULL;
  _instanceCounter = alloc(int);
  _ownedFields = initOwnedFields(_instanceCounter);
  stress = 0;
  seed = 0;
  stressCaptured = 0;
  t1 = NULL;
  i = 0;
  j = 0;
  r = 0;
  toAdd = 0;
  test = false;
  r1 = 0;
  toRemove = 0;
  test1 = false;
  t11 = NULL;
  t12 = NULL;
  stress = 0;
  seed = 1;
  stressCaptured = stress;
  _cond_1 = 0 / 2 * 2 == 0;
  if (stressCaptured / 2 * 2 != stressCaptured)
  {
    stressCaptured = stressCaptured + 1;
  }
  t1 = create_tree(stressCaptured, _ownedFields);
  i = 0;
  _cond_2 = i < 0 && 0 <= i;
  while (0 <= i && i < stressCaptured)
  {
    r = rand(seed);
    seed = r;
    toAdd = mod(r, 2 * stressCaptured);
    t11 = tree_add(t1, toAdd, _ownedFields);
    test = tree_contains(t11, toAdd, _ownedFields);
    assert(test);
    i = i + 1;
    t1 = t11;
  }
  j = 0;
  _cond_3 = j < 0;
  while (j < stressCaptured)
  {
    r1 = rand(seed);
    seed = r1;
    toRemove = mod(r1, 2 * stressCaptured);
    _tempFields = initOwnedFields(_instanceCounter);
    if (_cond_1 && !_cond_2 && _cond_3)
    {
    }
    t12 = tree_remove(t1, toRemove, _ownedFields);
    tree_main_lemma(t12, toRemove, _ownedFields);
    test1 = tree_contains(t12, toRemove, _ownedFields);
    assert(!test1);
    j = j + 1;
    t1 = t12;
  }
  return 0;
}

void sep_bst(struct Node* root, int min, int max, struct OwnedFields* _ownedFields)
{
}

void sep_tree(struct Node* root, struct OwnedFields* _ownedFields)
{
}

void tree(struct Node* root, struct OwnedFields* _ownedFields)
{
}

struct Node* tree_add(struct Node* root, int x, struct OwnedFields* _ownedFields)
{
  struct Node* res = NULL;
  res = NULL;
  assert(x <= 2147483647);
  res = tree_add_helper(root, x, -2147483647, 2147483647, _ownedFields);
  return res;
}

struct Node* tree_add_helper(struct Node* root, int x, int min, int max, struct OwnedFields* _ownedFields)
{
  struct Node* _ = NULL;
  int v = 0;
  struct Node* l = NULL;
  struct Node* r = NULL;
  struct Node* _1 = NULL;
  struct Node* _2 = NULL;
  struct Node* _3 = NULL;
  struct Node* _4 = NULL;
  bool _cond_1 = false;
  bool _cond_2 = false;
  bool _cond_3 = false;
  bool _cond_4 = false;
  bool _cond_5 = false;
  bool _cond_6 = false;
  _ = NULL;
  v = 0;
  l = NULL;
  r = NULL;
  _1 = NULL;
  _2 = NULL;
  _3 = NULL;
  _4 = NULL;
  _cond_1 = root == NULL;
  _cond_2 = root == NULL;
  if (root == NULL)
  {
    _ = create_tree_helper(x, min, max, _ownedFields);
    return _;
  }
  else
  {
    if (!_cond_1 && !_cond_2)
    {
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 0, "Field access runtime check failed for struct Node.val");
    }
    v = root->val;
    if (!_cond_1 && !_cond_2)
    {
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 1, "Field access runtime check failed for struct Node.left");
    }
    l = root->left;
    if (!_cond_1 && !_cond_2)
    {
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 2, "Field access runtime check failed for struct Node.right");
    }
    r = root->right;
    _cond_3 = !(root == NULL) && x < root->val;
    if (x < v)
    {
      _cond_4 = !(root == NULL) && root->left == NULL;
      if (l != NULL)
      {
        _1 = tree_add_helper(l, x, min, v - 1, _ownedFields);
        if (!_cond_1 && !_cond_2 && _cond_3 && !_cond_4)
        {
          assertAcc(_ownedFields, root != NULL ? root->_id : -1, 1, "Field access runtime check failed for struct Node.left");
        }
        root->left = _1;
      }
      else
      {
        _2 = create_tree_helper(x, min, v - 1, _ownedFields);
        if (!_cond_1 && !_cond_2 && _cond_3 && _cond_4)
        {
          assertAcc(_ownedFields, root != NULL ? root->_id : -1, 1, "Field access runtime check failed for struct Node.left");
        }
        root->left = _2;
      }
    }
    else
    {
      _cond_5 = !(root == NULL) && root->val < x;
      if (v < x)
      {
        _cond_6 = !(root == NULL) && root->right == NULL;
        if (r != NULL)
        {
          _3 = tree_add_helper(r, x, v + 1, max, _ownedFields);
          if (!_cond_1 && !_cond_2 && !_cond_3 && _cond_5 && !_cond_6)
          {
            assertAcc(_ownedFields, root != NULL ? root->_id : -1, 2, "Field access runtime check failed for struct Node.right");
          }
          root->right = _3;
        }
        else
        {
          _4 = create_tree_helper(x, v + 1, max, _ownedFields);
          if (!_cond_1 && !_cond_2 && !_cond_3 && _cond_5 && _cond_6)
          {
            assertAcc(_ownedFields, root != NULL ? root->_id : -1, 2, "Field access runtime check failed for struct Node.right");
          }
          root->right = _4;
        }
      }
    }
    return root;
  }
}

bool tree_contains(struct Node* root, int x, struct OwnedFields* _ownedFields)
{
  bool res = false;
  res = false;
  res = tree_contains_helper(root, x, -2147483647, 2147483647, _ownedFields);
  return res;
}

bool tree_contains_helper(struct Node* root, int x, int min, int max, struct OwnedFields* _ownedFields)
{
  int v = 0;
  struct Node* l = NULL;
  struct Node* r = NULL;
  bool temp1 = false;
  bool temp2 = false;
  bool _cond_1 = false;
  bool _cond_2 = false;
  v = 0;
  l = NULL;
  r = NULL;
  temp1 = false;
  temp2 = false;
  _cond_1 = root == NULL;
  if (root == NULL)
  {
    return false;
  }
  else
  {
    _cond_2 = root == NULL;
    if (!_cond_1 && !_cond_2)
    {
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 0, "Field access runtime check failed for struct Node.val");
    }
    v = root->val;
    if (!_cond_1 && !_cond_2)
    {
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 1, "Field access runtime check failed for struct Node.left");
    }
    l = root->left;
    if (!_cond_1 && !_cond_2)
    {
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 2, "Field access runtime check failed for struct Node.right");
    }
    r = root->right;
    if (v == x)
    {
      return true;
    }
    else
    {
      if (x < v)
      {
        temp1 = tree_contains_helper(l, x, min, v - 1, _ownedFields);
        return temp1;
      }
      else
      {
        temp2 = tree_contains_helper(r, x, v + 1, max, _ownedFields);
        return temp2;
      }
    }
  }
}

void tree_main_lemma(struct Node* root, int x, struct OwnedFields* _ownedFields)
{
  tree_main_lemma_bst(root, x, -2147483647, 2147483647, _ownedFields);
}

void tree_main_lemma_bst(struct Node* root, int x, int min, int max, struct OwnedFields* _ownedFields)
{
  bool _cond_1 = false;
  bool _cond_2 = false;
  _cond_1 = root == NULL;
  if (root == NULL)
  {
  }
  else
  {
    _cond_2 = root == NULL;
    if (!_cond_1 && !_cond_2)
    {
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 1, "Field access runtime check failed for struct Node.left");
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 0, "Field access runtime check failed for struct Node.val");
    }
    tree_main_lemma_bst(root->left, x, min, root->val - 1, _ownedFields);
    if (!_cond_1 && !_cond_2)
    {
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 2, "Field access runtime check failed for struct Node.right");
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 0, "Field access runtime check failed for struct Node.val");
    }
    tree_main_lemma_bst(root->right, x, root->val + 1, max, _ownedFields);
  }
}

int tree_max(struct Node* root, struct OwnedFields* _ownedFields)
{
  int res = 0;
  struct OwnedFields* _tempFields = NULL;
  res = 0;
  _tempFields = initOwnedFields(_ownedFields->instanceCounter);
  assert(!(root == NULL));
  bst(root, -2147483647, 2147483647, _ownedFields);
  res = tree_max_helper(root, -2147483647, 2147483647, _ownedFields);
  tree_max_lemma(root, 2147483647, -2147483647, res, _ownedFields);
  return res;
}

int tree_max_helper(struct Node* root, int min, int max, struct OwnedFields* _ownedFields)
{
  int v = 0;
  struct Node* r = NULL;
  int m = 0;
  bool _cond_1 = false;
  bool _cond_2 = false;
  bool _cond_3 = false;
  struct OwnedFields* _tempFields = NULL;
  v = 0;
  r = NULL;
  m = 0;
  _cond_1 = root == NULL;
  if (!_cond_1)
  {
    assertAcc(_ownedFields, root != NULL ? root->_id : -1, 0, "Field access runtime check failed for struct Node.val");
  }
  v = root->val;
  if (!_cond_1)
  {
    assertAcc(_ownedFields, root != NULL ? root->_id : -1, 2, "Field access runtime check failed for struct Node.right");
  }
  r = root->right;
  _cond_2 = !(root == NULL) && root->right == NULL;
  if (r == NULL)
  {
    return v;
  }
  else
  {
    _tempFields = initOwnedFields(_ownedFields->instanceCounter);
    if (!_cond_1 && !_cond_2)
    {
      bst(root->right, root->val + 1, max, _ownedFields);
    }
    m = tree_max_helper(r, v + 1, max, _ownedFields);
    _cond_3 = r == NULL;
    if (!_cond_1 && !_cond_2 && !_cond_3)
    {
      assert(v <= m);
    }
    return m;
  }
}

void tree_max_lemma(struct Node* root, int newMax, int min, int max, struct OwnedFields* _ownedFields)
{
  bool _cond_1 = false;
  _cond_1 = root == NULL;
  if (root == NULL)
  {
  }
  else
  {
    if (!_cond_1)
    {
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 2, "Field access runtime check failed for struct Node.right");
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 0, "Field access runtime check failed for struct Node.val");
    }
    tree_max_lemma(root->right, newMax, root->val + 1, max, _ownedFields);
  }
}

int tree_min(struct Node* root, struct OwnedFields* _ownedFields)
{
  int res = 0;
  res = 0;
  assert(!(root == NULL));
  res = tree_min_helper(root, -2147483647, 2147483647, _ownedFields);
  tree_min_lemma(root, -2147483647, res, 2147483647, _ownedFields);
  return res;
}

int tree_min_helper(struct Node* root, int min, int max, struct OwnedFields* _ownedFields)
{
  int v = 0;
  struct Node* l = NULL;
  int m = 0;
  bool _cond_1 = false;
  bool _cond_2 = false;
  struct OwnedFields* _tempFields = NULL;
  struct OwnedFields* _tempFields1 = NULL;
  v = 0;
  l = NULL;
  m = 0;
  _cond_1 = root == NULL;
  if (!_cond_1)
  {
    assertAcc(_ownedFields, root != NULL ? root->_id : -1, 0, "Field access runtime check failed for struct Node.val");
  }
  v = root->val;
  if (!_cond_1)
  {
    assertAcc(_ownedFields, root != NULL ? root->_id : -1, 1, "Field access runtime check failed for struct Node.left");
  }
  l = root->left;
  _cond_2 = !(root == NULL) && root->left == NULL;
  if (l == NULL)
  {
    _tempFields = initOwnedFields(_ownedFields->instanceCounter);
    if (!_cond_1 && !_cond_2)
    {
      bst(root, m, max, _ownedFields);
    }
    return v;
  }
  else
  {
    m = tree_min_helper(l, min, v - 1, _ownedFields);
    _tempFields1 = initOwnedFields(_ownedFields->instanceCounter);
    if (!_cond_1 && !_cond_2)
    {
      bst(root, m, max, _ownedFields);
    }
    return m;
  }
}

void tree_min_lemma(struct Node* root, int newMin, int min, int max, struct OwnedFields* _ownedFields)
{
  bool _cond_1 = false;
  bool _cond_2 = false;
  _cond_1 = root == NULL;
  if (root == NULL)
  {
  }
  else
  {
    _cond_2 = root == NULL;
    if (!_cond_1 && !_cond_2)
    {
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 1, "Field access runtime check failed for struct Node.left");
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 0, "Field access runtime check failed for struct Node.val");
    }
    tree_min_lemma(root->left, newMin, min, root->val - 1, _ownedFields);
  }
}

struct Node* tree_remove(struct Node* root, int x, struct OwnedFields* _ownedFields)
{
  struct Node* res = NULL;
  struct OwnedFields* _tempFields = NULL;
  res = NULL;
  _tempFields = initOwnedFields(_ownedFields->instanceCounter);
  bst(root, -2147483647, 2147483647, _ownedFields);
  res = tree_remove_helper(root, x, -2147483647, 2147483647, _ownedFields);
  return res;
}

struct Node* tree_remove_helper(struct Node* root, int x, int min, int max, struct OwnedFields* _ownedFields)
{
  int v = 0;
  struct Node* l = NULL;
  struct Node* r = NULL;
  struct Node* _ = NULL;
  struct Node* _1 = NULL;
  int m = 0;
  struct Node* _2 = NULL;
  bool _cond_1 = false;
  bool _cond_2 = false;
  bool _cond_3 = false;
  bool _cond_4 = false;
  bool _cond_5 = false;
  struct OwnedFields* _tempFields = NULL;
  struct OwnedFields* _tempFields1 = NULL;
  struct OwnedFields* _tempFields2 = NULL;
  struct OwnedFields* _tempFields3 = NULL;
  struct OwnedFields* _tempFields4 = NULL;
  struct OwnedFields* _tempFields5 = NULL;
  v = 0;
  l = NULL;
  r = NULL;
  _ = NULL;
  _1 = NULL;
  m = 0;
  _2 = NULL;
  _cond_1 = root == NULL;
  if (root == NULL)
  {
    return root;
  }
  else
  {
    if (!_cond_1)
    {
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 0, "Field access runtime check failed for struct Node.val");
    }
    v = root->val;
    if (!_cond_1)
    {
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 1, "Field access runtime check failed for struct Node.left");
    }
    l = root->left;
    if (!_cond_1)
    {
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 2, "Field access runtime check failed for struct Node.right");
    }
    r = root->right;
    _cond_2 = !(root == NULL) && x < root->val;
    if (x < v)
    {
      _tempFields3 = initOwnedFields(_ownedFields->instanceCounter);
      if (!_cond_1 && _cond_2)
      {
        bst(root->left, min, root->val - 1, _ownedFields);
      }
      _ = tree_remove_helper(l, x, min, v - 1, _ownedFields);
      if (!_cond_1 && _cond_2)
      {
        assertAcc(_ownedFields, root != NULL ? root->_id : -1, 1, "Field access runtime check failed for struct Node.left");
      }
      root->left = _;
      tree_remove_lemma_right(r, x, v + 1, max, _ownedFields);
      return root;
    }
    else
    {
      _cond_3 = !(root == NULL) && root->val < x;
      if (v < x)
      {
        _tempFields = initOwnedFields(_ownedFields->instanceCounter);
        if (!_cond_1 && !_cond_2 && _cond_3)
        {
          bst(root->right, root->val + 1, max, _ownedFields);
        }
        _1 = tree_remove_helper(r, x, v + 1, max, _ownedFields);
        if (!_cond_1 && !_cond_2 && _cond_3)
        {
          assertAcc(_ownedFields, root != NULL ? root->_id : -1, 2, "Field access runtime check failed for struct Node.right");
        }
        root->right = _1;
        _tempFields1 = initOwnedFields(_ownedFields->instanceCounter);
        if (!_cond_1 && !_cond_2 && _cond_3)
        {
          bst(l, min, v - 1, _ownedFields);
        }
        tree_remove_lemma_left(l, x, min, v - 1, _ownedFields);
        return root;
      }
      else
      {
        _cond_4 = !(root == NULL) && root->left == NULL;
        if (l == NULL)
        {
          if (r == NULL)
          {
            return NULL;
          }
          else
          {
            tree_remove_lemma_right(r, x, v + 1, max, _ownedFields);
            tree_remove_lemma_min(r, x, min, v + 1, max, _ownedFields);
            return r;
          }
        }
        else
        {
          _cond_5 = !(root == NULL) && root->right == NULL;
          if (r == NULL)
          {
            _tempFields4 = initOwnedFields(_ownedFields->instanceCounter);
            if (!_cond_1 && !_cond_2 && !_cond_3 && !_cond_4 && _cond_5)
            {
              bst(root->left, min, root->val - 1, _ownedFields);
            }
            tree_remove_lemma_left(l, x, min, v - 1, _ownedFields);
            tree_remove_lemma_max(l, x, max, min, v - 1, _ownedFields);
            return l;
          }
          else
          {
            _tempFields5 = initOwnedFields(_ownedFields->instanceCounter);
            if (!_cond_1 && !_cond_2 && !_cond_3 && !_cond_4 && !_cond_5)
            {
              bst(root->left, min, root->val - 1, _ownedFields);
            }
            m = tree_max_helper(l, min, v - 1, _ownedFields);
            if (!_cond_1 && !_cond_2 && !_cond_3 && !_cond_4 && !_cond_5)
            {
              assert(min <= m);
            }
            if (!_cond_1 && !_cond_2 && !_cond_3 && !_cond_4 && !_cond_5)
            {
              assertAcc(_ownedFields, root != NULL ? root->_id : -1, 0, "Field access runtime check failed for struct Node.val");
            }
            root->val = m;
            _tempFields2 = initOwnedFields(_ownedFields->instanceCounter);
            if (!_cond_1 && !_cond_2 && !_cond_3 && !_cond_4 && !_cond_5)
            {
              bst(l, min, root->val, _ownedFields);
            }
            _2 = tree_remove_helper(l, m, min, m, _ownedFields);
            if (!_cond_1 && !_cond_2 && !_cond_3 && !_cond_4 && !_cond_5)
            {
              assertAcc(_ownedFields, root != NULL ? root->_id : -1, 1, "Field access runtime check failed for struct Node.left");
            }
            root->left = _2;
            tree_remove_lemma(root->left, min, m, _ownedFields);
            if (!_cond_1 && !_cond_2 && !_cond_3 && !_cond_4 && !_cond_5)
            {
              assertAcc(_ownedFields, root != NULL ? root->_id : -1, 1, "Field access runtime check failed for struct Node.left");
            }
            tree_remove_lemma_left2(root->left, x, m, min, m - 1, _ownedFields);
            tree_remove_lemma_right(r, x, v + 1, max, _ownedFields);
            tree_remove_lemma_min(r, x, m + 1, v + 1, max, _ownedFields);
            if (!_cond_1 && !_cond_2 && !_cond_3 && !_cond_4 && !_cond_5 && !(root == NULL))
            {
              assertAcc(_ownedFields, root != NULL ? root->_id : -1, 1, "Field access runtime check failed for struct Node.left");
            }
            if (!_cond_1 && !_cond_2 && !_cond_3 && !_cond_4 && !_cond_5 && !(root == NULL) || !_cond_1 && !_cond_2 && !_cond_3 && !_cond_4 && !_cond_5 && !(root == NULL))
            {
              assertAcc(_ownedFields, root != NULL ? root->_id : -1, 0, "Field access runtime check failed for struct Node.val");
            }
            if (!_cond_1 && !_cond_2 && !_cond_3 && !_cond_4 && !_cond_5 && !(root == NULL))
            {
              assert(!(root->val == x));
              bstRemove(root->left, x, min, root->val - 1, _ownedFields);
            }
            return root;
          }
        }
      }
    }
  }
}

void tree_remove_lemma(struct Node* root, int min, int max, struct OwnedFields* _ownedFields)
{
  bool _cond_1 = false;
  _cond_1 = root == NULL;
  if (root == NULL)
  {
  }
  else
  {
    if (!_cond_1)
    {
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 2, "Field access runtime check failed for struct Node.right");
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 0, "Field access runtime check failed for struct Node.val");
    }
    tree_remove_lemma(root->right, root->val + 1, max, _ownedFields);
  }
}

void tree_remove_lemma_left(struct Node* l, int x, int min, int max, struct OwnedFields* _ownedFields)
{
  bool _cond_1 = false;
  bool _cond_2 = false;
  bool _cond_3 = false;
  struct OwnedFields* _tempFields = NULL;
  struct OwnedFields* _tempFields1 = NULL;
  struct OwnedFields* _tempFields2 = NULL;
  struct OwnedFields* _tempFields3 = NULL;
  _cond_1 = l == NULL;
  if (l == NULL)
  {
  }
  else
  {
    if (!_cond_1 || !_cond_1)
    {
      assertAcc(_ownedFields, l != NULL ? l->_id : -1, 1, "Field access runtime check failed for struct Node.left");
    }
    _cond_2 = !(l == NULL) && l->left == NULL;
    if (l->left == NULL)
    {
      _tempFields3 = initOwnedFields(_ownedFields->instanceCounter);
      if (!_cond_1 && _cond_2)
      {
        assertAcc(_ownedFields, l != NULL ? l->_id : -1, 2, "Field access runtime check failed for struct Node.right");
        assertAcc(_ownedFields, l != NULL ? l->_id : -1, 0, "Field access runtime check failed for struct Node.val");
        bst(l->right, l->val + 1, max, _ownedFields);
      }
      tree_remove_lemma_left(l->right, x, l->val + 1, max, _ownedFields);
    }
    else
    {
      if (!_cond_1 && !_cond_2 || !_cond_1 && !_cond_2)
      {
        assertAcc(_ownedFields, l != NULL ? l->_id : -1, 2, "Field access runtime check failed for struct Node.right");
      }
      _cond_3 = !(l == NULL) && l->right == NULL;
      if (l->right == NULL)
      {
        _tempFields2 = initOwnedFields(_ownedFields->instanceCounter);
        if (!_cond_1 && !_cond_2 && _cond_3)
        {
          assertAcc(_ownedFields, l != NULL ? l->_id : -1, 0, "Field access runtime check failed for struct Node.val");
          bst(l->left, min, l->val - 1, _ownedFields);
        }
        tree_remove_lemma_left(l->left, x, min, l->val - 1, _ownedFields);
      }
      else
      {
        _tempFields = initOwnedFields(_ownedFields->instanceCounter);
        if (!_cond_1 && !_cond_2 && !_cond_3)
        {
          assertAcc(_ownedFields, l != NULL ? l->_id : -1, 0, "Field access runtime check failed for struct Node.val");
          bst(l->right, l->val + 1, max, _ownedFields);
        }
        tree_remove_lemma_left(l->right, x, l->val + 1, max, _ownedFields);
        _tempFields1 = initOwnedFields(_ownedFields->instanceCounter);
        if (!_cond_1 && !_cond_2 && !_cond_3)
        {
          assertAcc(_ownedFields, l != NULL ? l->_id : -1, 1, "Field access runtime check failed for struct Node.left");
          assertAcc(_ownedFields, l != NULL ? l->_id : -1, 0, "Field access runtime check failed for struct Node.val");
          bst(l->left, min, l->val - 1, _ownedFields);
        }
        tree_remove_lemma_left(l->left, x, min, l->val - 1, _ownedFields);
      }
    }
  }
  if (!_cond_1 && !_cond_2 && !_cond_3 && !(l == NULL) || !_cond_1 && !_cond_2 && _cond_3 && !(l == NULL) || !_cond_1 && _cond_2 && !(l == NULL))
  {
    assertAcc(_ownedFields, l != NULL ? l->_id : -1, 1, "Field access runtime check failed for struct Node.left");
  }
  if (!_cond_1 && !_cond_2 && !_cond_3 && !(l == NULL) || !_cond_1 && !_cond_2 && !_cond_3 && !(l == NULL) || !_cond_1 && !_cond_2 && _cond_3 && !(l == NULL) || !_cond_1 && !_cond_2 && _cond_3 && !(l == NULL) || !_cond_1 && _cond_2 && !(l == NULL) || !_cond_1 && _cond_2 && !(l == NULL))
  {
    assertAcc(_ownedFields, l != NULL ? l->_id : -1, 0, "Field access runtime check failed for struct Node.val");
  }
  if (!_cond_1 && !_cond_2 && !_cond_3 && !(l == NULL) || !_cond_1 && !_cond_2 && _cond_3 && !(l == NULL) || !_cond_1 && _cond_2 && !(l == NULL))
  {
    assert(!(l->val == x));
    bstRemove(l->left, x, min, l->val - 1, _ownedFields);
  }
}

void tree_remove_lemma_left2(struct Node* l, int newX, int x, int min, int max, struct OwnedFields* _ownedFields)
{
  bool _cond_1 = false;
  bool _cond_2 = false;
  bool _cond_3 = false;
  _cond_1 = l == NULL;
  if (l == NULL)
  {
  }
  else
  {
    if (!_cond_1 || !_cond_1)
    {
      assertAcc(_ownedFields, l != NULL ? l->_id : -1, 1, "Field access runtime check failed for struct Node.left");
    }
    _cond_2 = !(l == NULL) && l->left == NULL;
    if (l->left == NULL)
    {
      if (!_cond_1 && _cond_2)
      {
        assertAcc(_ownedFields, l != NULL ? l->_id : -1, 2, "Field access runtime check failed for struct Node.right");
        assertAcc(_ownedFields, l != NULL ? l->_id : -1, 0, "Field access runtime check failed for struct Node.val");
      }
      tree_remove_lemma_left2(l->right, newX, x, l->val + 1, max, _ownedFields);
    }
    else
    {
      if (!_cond_1 && !_cond_2 || !_cond_1 && !_cond_2)
      {
        assertAcc(_ownedFields, l != NULL ? l->_id : -1, 2, "Field access runtime check failed for struct Node.right");
      }
      _cond_3 = !(l == NULL) && l->right == NULL;
      if (l->right == NULL)
      {
        if (!_cond_1 && !_cond_2 && _cond_3)
        {
          assertAcc(_ownedFields, l != NULL ? l->_id : -1, 0, "Field access runtime check failed for struct Node.val");
        }
        tree_remove_lemma_left2(l->left, newX, x, min, l->val - 1, _ownedFields);
      }
      else
      {
        if (!_cond_1 && !_cond_2 && !_cond_3)
        {
          assertAcc(_ownedFields, l != NULL ? l->_id : -1, 0, "Field access runtime check failed for struct Node.val");
        }
        tree_remove_lemma_left2(l->right, newX, x, l->val + 1, max, _ownedFields);
        if (!_cond_1 && !_cond_2 && !_cond_3)
        {
          assertAcc(_ownedFields, l != NULL ? l->_id : -1, 1, "Field access runtime check failed for struct Node.left");
          assertAcc(_ownedFields, l != NULL ? l->_id : -1, 0, "Field access runtime check failed for struct Node.val");
        }
        tree_remove_lemma_left2(l->left, newX, x, min, l->val - 1, _ownedFields);
      }
    }
  }
}

void tree_remove_lemma_max(struct Node* root, int x, int newMax, int min, int max, struct OwnedFields* _ownedFields)
{
  bool _cond_1 = false;
  _cond_1 = root == NULL;
  if (root == NULL)
  {
  }
  else
  {
    if (!_cond_1)
    {
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 2, "Field access runtime check failed for struct Node.right");
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 0, "Field access runtime check failed for struct Node.val");
    }
    tree_remove_lemma_max(root->right, x, newMax, root->val + 1, max, _ownedFields);
  }
  if (!_cond_1 && !(root == NULL))
  {
    assertAcc(_ownedFields, root != NULL ? root->_id : -1, 1, "Field access runtime check failed for struct Node.left");
  }
  if (!_cond_1 && !(root == NULL) || !_cond_1 && !(root == NULL))
  {
    assertAcc(_ownedFields, root != NULL ? root->_id : -1, 0, "Field access runtime check failed for struct Node.val");
  }
  if (!_cond_1 && !(root == NULL))
  {
    assert(!(root->val == x));
    bstRemove(root->left, x, min, root->val - 1, _ownedFields);
  }
}

void tree_remove_lemma_min(struct Node* root, int x, int newMin, int min, int max, struct OwnedFields* _ownedFields)
{
  bool _cond_1 = false;
  _cond_1 = root == NULL;
  if (root == NULL)
  {
  }
  else
  {
    if (!_cond_1)
    {
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 1, "Field access runtime check failed for struct Node.left");
      assertAcc(_ownedFields, root != NULL ? root->_id : -1, 0, "Field access runtime check failed for struct Node.val");
    }
    tree_remove_lemma_min(root->left, x, newMin, min, root->val - 1, _ownedFields);
  }
}

void tree_remove_lemma_right(struct Node* r, int x, int min, int max, struct OwnedFields* _ownedFields)
{
  bool _cond_1 = false;
  bool _cond_2 = false;
  bool _cond_3 = false;
  _cond_1 = r == NULL;
  if (r == NULL)
  {
  }
  else
  {
    if (!_cond_1 || !_cond_1)
    {
      assertAcc(_ownedFields, r != NULL ? r->_id : -1, 1, "Field access runtime check failed for struct Node.left");
    }
    _cond_2 = !(r == NULL) && r->left == NULL;
    if (r->left == NULL)
    {
      if (!_cond_1 && _cond_2)
      {
        assertAcc(_ownedFields, r != NULL ? r->_id : -1, 2, "Field access runtime check failed for struct Node.right");
        assertAcc(_ownedFields, r != NULL ? r->_id : -1, 0, "Field access runtime check failed for struct Node.val");
        assert(x < r->val + 1);
      }
      tree_remove_lemma_right(r->right, x, r->val + 1, max, _ownedFields);
    }
    else
    {
      if (!_cond_1 && !_cond_2 || !_cond_1 && !_cond_2)
      {
        assertAcc(_ownedFields, r != NULL ? r->_id : -1, 2, "Field access runtime check failed for struct Node.right");
      }
      _cond_3 = !(r == NULL) && r->right == NULL;
      if (r->right == NULL)
      {
        if (!_cond_1 && !_cond_2 && _cond_3)
        {
          assertAcc(_ownedFields, r != NULL ? r->_id : -1, 0, "Field access runtime check failed for struct Node.val");
        }
        tree_remove_lemma_right(r->left, x, min, r->val - 1, _ownedFields);
      }
      else
      {
        if (!_cond_1 && !_cond_2 && !_cond_3)
        {
          assertAcc(_ownedFields, r != NULL ? r->_id : -1, 0, "Field access runtime check failed for struct Node.val");
          assert(x < r->val + 1);
        }
        tree_remove_lemma_right(r->right, x, r->val + 1, max, _ownedFields);
        if (!_cond_1 && !_cond_2 && !_cond_3)
        {
          assertAcc(_ownedFields, r != NULL ? r->_id : -1, 1, "Field access runtime check failed for struct Node.left");
          assertAcc(_ownedFields, r != NULL ? r->_id : -1, 0, "Field access runtime check failed for struct Node.val");
        }
        tree_remove_lemma_right(r->left, x, min, r->val - 1, _ownedFields);
      }
    }
  }
  if (!_cond_1 && !_cond_2 && !_cond_3 && !(r == NULL) || !_cond_1 && !_cond_2 && _cond_3 && !(r == NULL) || !_cond_1 && _cond_2 && !(r == NULL))
  {
    assertAcc(_ownedFields, r != NULL ? r->_id : -1, 1, "Field access runtime check failed for struct Node.left");
  }
  if (!_cond_1 && !_cond_2 && !_cond_3 && !(r == NULL) || !_cond_1 && !_cond_2 && !_cond_3 && !(r == NULL) || !_cond_1 && !_cond_2 && _cond_3 && !(r == NULL) || !_cond_1 && !_cond_2 && _cond_3 && !(r == NULL) || !_cond_1 && _cond_2 && !(r == NULL) || !_cond_1 && _cond_2 && !(r == NULL))
  {
    assertAcc(_ownedFields, r != NULL ? r->_id : -1, 0, "Field access runtime check failed for struct Node.val");
  }
  if (!_cond_1 && !_cond_2 && !_cond_3 && !(r == NULL) || !_cond_1 && !_cond_2 && _cond_3 && !(r == NULL) || !_cond_1 && _cond_2 && !(r == NULL))
  {
    assert(!(r->val == x));
    bstRemove(r->left, x, min, r->val - 1, _ownedFields);
  }
}
