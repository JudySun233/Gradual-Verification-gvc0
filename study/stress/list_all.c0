/*
*/
#use <runtime>
#use <stress>
struct Node;

struct Node
{
  int val;
  struct Node* next;
  int _id;
};

void appendLemmaAfterLoopBody(struct Node* a, struct Node* b, struct Node* c, int aPrev, int bVal, int cVal, struct OwnedFields* _ownedFields);
void appendLemmaLoopBody(struct Node* a, struct Node* b, struct Node* c, int aPrev, int cPrev, int bVal, int cVal, struct OwnedFields* _ownedFields);
struct Node* create_list(int val, struct OwnedFields* _ownedFields);
struct Node* list_insert(struct Node* list, int val, struct OwnedFields* _ownedFields);
int main();
void sorted(struct Node* list, struct OwnedFields* _ownedFields);
void sortedSeg(struct Node* start, struct Node* end, int endVal, struct OwnedFields* _ownedFields);
void sortedSegHelper(struct Node* start, struct Node* end, int prev, int endVal, struct OwnedFields* _ownedFields);

void appendLemmaAfterLoopBody(struct Node* a, struct Node* b, struct Node* c, int aPrev, int bVal, int cVal, struct OwnedFields* _ownedFields)
{
  if (b == c)
  {
    assert(true);
  }
  if (!(b == c))
  {
    assert(true);
  }
  if (b == c)
  {
    assert(bVal == cVal);
  }
  if (!(c == NULL))
  {
    assert(c->val == cVal);
  }
  if (c == NULL)
  {
    assert(true);
  }
  if (!(b == c))
  {
    sortedSegHelper(b->next, c, b->val, cVal, _ownedFields);
  }
  if (b == c)
  {
  }
  else
  {
    if (a == b)
    {
    }
    else
    {
      assertAcc(_ownedFields, a->_id, 1, "Field access runtime check failed for struct Node.next");
      assertAcc(_ownedFields, a->_id, 0, "Field access runtime check failed for struct Node.val");
      appendLemmaAfterLoopBody(a->next, b, c, a->val, bVal, cVal, _ownedFields);
    }
  }
  if (c == NULL)
  {
    assert(true);
  }
  if (!(c == NULL))
  {
    assert(c->val == cVal);
  }
}

void appendLemmaLoopBody(struct Node* a, struct Node* b, struct Node* c, int aPrev, int cPrev, int bVal, int cVal, struct OwnedFields* _ownedFields)
{
  if (b == c)
  {
    assert(true);
  }
  if (!(b == c))
  {
    assert(true);
  }
  if (b == c)
  {
    assert(bVal == cVal);
  }
  if (!(c == NULL))
  {
    sortedSegHelper(c->next, NULL, c->val, -1, _ownedFields);
  }
  if (c == NULL)
  {
    assert(true);
  }
  if (!(b == c))
  {
    sortedSegHelper(b->next, c, b->val, cVal, _ownedFields);
  }
  if (b == c)
  {
  }
  else
  {
    if (a == b)
    {
    }
    else
    {
      assertAcc(_ownedFields, a->_id, 1, "Field access runtime check failed for struct Node.next");
      assertAcc(_ownedFields, a->_id, 0, "Field access runtime check failed for struct Node.val");
      appendLemmaLoopBody(a->next, b, c, a->val, cPrev, bVal, cVal, _ownedFields);
    }
  }
  if (c == NULL)
  {
    assert(true);
  }
  if (!(c == NULL))
  {
    sortedSegHelper(c->next, NULL, c->val, -1, _ownedFields);
  }
}

struct Node* create_list(int val, struct OwnedFields* _ownedFields)
{
  struct Node* n = NULL;
  assert(true);
  n = alloc(struct Node);
  n->_id = addStructAcc(_ownedFields, 2);
  assertAcc(_ownedFields, n->_id, 0, "Field access runtime check failed for struct Node.val");
  n->val = val;
  assertAcc(_ownedFields, n->_id, 1, "Field access runtime check failed for struct Node.next");
  n->next = NULL;
  return n;
}

struct Node* list_insert(struct Node* list, int val, struct OwnedFields* _ownedFields)
{
  struct Node* n = NULL;
  struct Node* curr = NULL;
  struct Node* tmp = NULL;
  struct Node* prev = NULL;
  sorted(list, _ownedFields);
  assertAcc(_ownedFields, list->_id, 0, "Field access runtime check failed for struct Node.val");
  if (list == NULL || val <= list->val)
  {
    n = alloc(struct Node);
    n->_id = addStructAcc(_ownedFields, 2);
    assertAcc(_ownedFields, n->_id, 0, "Field access runtime check failed for struct Node.val");
    n->val = val;
    assertAcc(_ownedFields, n->_id, 1, "Field access runtime check failed for struct Node.next");
    n->next = list;
    return n;
  }
  else
  {
    curr = list;
    assertAcc(_ownedFields, curr->next->_id, 0, "Field access runtime check failed for struct Node.val");
    assertAcc(_ownedFields, curr->_id, 1, "Field access runtime check failed for struct Node.next");
    while (curr->next != NULL && curr->next->val < val)
    {
      if (curr->next == NULL)
      {
        assert(true);
      }
      if (!(curr->next == NULL))
      {
        sortedSegHelper(curr->next->next, NULL, curr->next->val, -1, _ownedFields);
      }
      prev = curr;
      assertAcc(_ownedFields, prev->_id, 1, "Field access runtime check failed for struct Node.next");
      curr = prev->next;
      if (list == prev)
      {
      }
      else
      {
        assertAcc(_ownedFields, list->_id, 1, "Field access runtime check failed for struct Node.next");
        assertAcc(_ownedFields, list->_id, 0, "Field access runtime check failed for struct Node.val");
        assertAcc(_ownedFields, prev->_id, 0, "Field access runtime check failed for struct Node.val");
        assertAcc(_ownedFields, prev->_id, 0, "Field access runtime check failed for struct Node.val");
        assertAcc(_ownedFields, curr->_id, 0, "Field access runtime check failed for struct Node.val");
        appendLemmaLoopBody(list->next, prev, curr, list->val, prev->val, prev->val, curr->val, _ownedFields);
      }
    }
    if (curr->next == NULL)
    {
      assert(true);
    }
    if (!(curr->next == NULL))
    {
      sortedSegHelper(curr->next->next, NULL, curr->next->val, -1, _ownedFields);
    }
    tmp = alloc(struct Node);
    tmp->_id = addStructAcc(_ownedFields, 2);
    assertAcc(_ownedFields, tmp->_id, 0, "Field access runtime check failed for struct Node.val");
    tmp->val = val;
    assertAcc(_ownedFields, tmp->_id, 1, "Field access runtime check failed for struct Node.next");
    assertAcc(_ownedFields, curr->_id, 1, "Field access runtime check failed for struct Node.next");
    tmp->next = curr->next;
    assertAcc(_ownedFields, curr->_id, 1, "Field access runtime check failed for struct Node.next");
    curr->next = tmp;
    if (list == curr)
    {
    }
    else
    {
      assertAcc(_ownedFields, list->_id, 1, "Field access runtime check failed for struct Node.next");
      assertAcc(_ownedFields, list->_id, 0, "Field access runtime check failed for struct Node.val");
      assertAcc(_ownedFields, curr->_id, 0, "Field access runtime check failed for struct Node.val");
      appendLemmaAfterLoopBody(list->next, curr, NULL, list->val, curr->val, -1, _ownedFields);
    }
    return list;
  }
}

int main()
{
  int stressLevel = 0;
  struct Node* l = NULL;
  int i = 0;
  struct Node* l1 = NULL;
  int* _instanceCounter = NULL;
  struct OwnedFields* _ownedFields = NULL;
  _instanceCounter = alloc(int);
  _ownedFields = initOwnedFields(_instanceCounter);
  stressLevel = readStress();
  l = create_list(3, _ownedFields);
  i = 0;
  while (i < stressLevel)
  {
    l1 = list_insert(l, 1, _ownedFields);
    i = i + 1;
    l = l1;
  }
  return 0;
}

void sorted(struct Node* list, struct OwnedFields* _ownedFields)
{
  sortedSeg(list, NULL, -1, _ownedFields);
}

void sortedSeg(struct Node* start, struct Node* end, int endVal, struct OwnedFields* _ownedFields)
{
  if (start == end)
  {
    assert(true);
  }
  else
  {
    assertAcc(_ownedFields, start->_id, 0, "Field access runtime check failed for struct Node.val");
    assertAcc(_ownedFields, start->_id, 1, "Field access runtime check failed for struct Node.next");
    sortedSegHelper(start->next, end, start->val, endVal, _ownedFields);
  }
}

void sortedSegHelper(struct Node* start, struct Node* end, int prev, int endVal, struct OwnedFields* _ownedFields)
{
  if (start == end)
  {
    if (end == NULL)
    {
      assert(true);
    }
    else
    {
      assert(endVal >= prev);
    }
  }
  else
  {
    assertAcc(_ownedFields, start->_id, 0, "Field access runtime check failed for struct Node.val");
    assertAcc(_ownedFields, start->_id, 1, "Field access runtime check failed for struct Node.next");
    assert(start->val >= prev);
    sortedSegHelper(start->next, end, start->val, endVal, _ownedFields);
  }
}
