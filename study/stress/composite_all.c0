/*
*/
#use <runtime>
#use <stress>
struct Node;

struct Node
{
  int total;
  struct Node* left;
  struct Node* right;
  struct Node* parent;
  int _id;
};

void context(struct Node* node, struct Node* parent, int total, struct OwnedFields* _ownedFields);
struct Node* create_tree(struct OwnedFields* _ownedFields);
int fixup_ancestors(struct Node* node, struct Node* parent, int oldTotal, int newTotal, struct OwnedFields* _ownedFields);
int main();
void subtreeHelper(struct Node* l, struct Node* r, struct Node* parent, int total, struct OwnedFields* _ownedFields);
void tree(struct Node* node, struct OwnedFields* _ownedFields);
struct Node* tree_add_left(struct Node* node, struct OwnedFields* _ownedFields);
struct Node* tree_add_right(struct Node* node, struct OwnedFields* _ownedFields);
struct Node* tree_get_left(struct Node* node, struct OwnedFields* _ownedFields);
struct Node* tree_get_parent(struct Node* node, struct OwnedFields* _ownedFields);
struct Node* tree_get_right(struct Node* node, struct OwnedFields* _ownedFields);
int tree_get_total(struct Node* node, struct OwnedFields* _ownedFields);
bool tree_has_left(struct Node* node, struct OwnedFields* _ownedFields);
bool tree_has_parent(struct Node* node, struct OwnedFields* _ownedFields);
bool tree_has_right(struct Node* node, struct OwnedFields* _ownedFields);

void context(struct Node* node, struct Node* parent, int total, struct OwnedFields* _ownedFields)
{
  if (parent == NULL)
  {
    assert(true);
  }
  else
  {
    assertAcc(_ownedFields, parent->_id, 1, "Field access runtime check failed for struct Node.left");
    assertAcc(_ownedFields, parent->_id, 2, "Field access runtime check failed for struct Node.right");
    assertAcc(_ownedFields, parent->_id, 3, "Field access runtime check failed for struct Node.parent");
    assertAcc(_ownedFields, parent->_id, 0, "Field access runtime check failed for struct Node.total");
    context(parent, parent->parent, parent->total, _ownedFields);
    if (node == parent->left)
    {
      if (parent->right == NULL)
      {
        assert(parent->total == 1 + total);
      }
      else
      {
        assertAcc(_ownedFields, parent->right->_id, 1, "Field access runtime check failed for struct Node.left");
        assertAcc(_ownedFields, parent->right->_id, 2, "Field access runtime check failed for struct Node.right");
        assertAcc(_ownedFields, parent->right->_id, 3, "Field access runtime check failed for struct Node.parent");
        assertAcc(_ownedFields, parent->right->_id, 0, "Field access runtime check failed for struct Node.total");
        assert(parent->right->parent == parent);
        subtreeHelper(parent->right->left, parent->right->right, parent->right, parent->right->total, _ownedFields);
        assert(parent->total == 1 + total + parent->right->total);
      }
    }
    else
    {
      assert(node == parent->right);
      if (parent->left == NULL)
      {
        assert(parent->total == 1 + total);
      }
      else
      {
        assertAcc(_ownedFields, parent->left->_id, 1, "Field access runtime check failed for struct Node.left");
        assertAcc(_ownedFields, parent->left->_id, 2, "Field access runtime check failed for struct Node.right");
        assertAcc(_ownedFields, parent->left->_id, 3, "Field access runtime check failed for struct Node.parent");
        assertAcc(_ownedFields, parent->left->_id, 0, "Field access runtime check failed for struct Node.total");
        assert(parent->left->parent == parent);
        subtreeHelper(parent->left->left, parent->left->right, parent->left, parent->left->total, _ownedFields);
        assert(parent->total == 1 + total + parent->left->total);
      }
    }
  }
}

struct Node* create_tree(struct OwnedFields* _ownedFields)
{
  struct Node* n = NULL;
  assert(true);
  n = alloc(struct Node);
  n->_id = addStructAcc(_ownedFields, 4);
  assertAcc(_ownedFields, n->_id, 1, "Field access runtime check failed for struct Node.left");
  n->left = NULL;
  assertAcc(_ownedFields, n->_id, 2, "Field access runtime check failed for struct Node.right");
  n->right = NULL;
  assertAcc(_ownedFields, n->_id, 3, "Field access runtime check failed for struct Node.parent");
  n->parent = NULL;
  assertAcc(_ownedFields, n->_id, 0, "Field access runtime check failed for struct Node.total");
  n->total = 1;
  return n;
}

int fixup_ancestors(struct Node* node, struct Node* parent, int oldTotal, int newTotal, struct OwnedFields* _ownedFields)
{
  struct Node* left = NULL;
  struct Node* right = NULL;
  struct Node* grandparent = NULL;
  int oldparentTotal = 0;
  int leftTotal = 0;
  int rightTotal = 0;
  int parentTotal = 0;
  context(node, parent, oldTotal, _ownedFields);
  if (parent == NULL)
  {
  }
  else
  {
    assertAcc(_ownedFields, parent->_id, 1, "Field access runtime check failed for struct Node.left");
    left = parent->left;
    assertAcc(_ownedFields, parent->_id, 2, "Field access runtime check failed for struct Node.right");
    right = parent->right;
    assertAcc(_ownedFields, parent->_id, 3, "Field access runtime check failed for struct Node.parent");
    grandparent = parent->parent;
    assertAcc(_ownedFields, parent->_id, 0, "Field access runtime check failed for struct Node.total");
    oldparentTotal = parent->total;
    leftTotal = 0;
    rightTotal = 0;
    if (node == left)
    {
      leftTotal = newTotal;
      if (right != NULL)
      {
        assertAcc(_ownedFields, right->_id, 0, "Field access runtime check failed for struct Node.total");
        rightTotal = right->total;
      }
    }
    else
    {
      if (left != NULL)
      {
        assertAcc(_ownedFields, left->_id, 0, "Field access runtime check failed for struct Node.total");
        leftTotal = left->total;
      }
      rightTotal = newTotal;
    }
    parentTotal = 1 + leftTotal + rightTotal;
    assertAcc(_ownedFields, parent->_id, 0, "Field access runtime check failed for struct Node.total");
    parent->total = parentTotal;
    fixup_ancestors(parent, grandparent, oldparentTotal, parentTotal, _ownedFields);
  }
  return 0;
}

int main()
{
  int stress = 0;
  struct Node* node = NULL;
  int i = 0;
  struct Node* node1 = NULL;
  struct Node* node11 = NULL;
  struct Node* node111 = NULL;
  struct Node* node1111 = NULL;
  int* _instanceCounter = NULL;
  struct OwnedFields* _ownedFields = NULL;
  _instanceCounter = alloc(int);
  _ownedFields = initOwnedFields(_instanceCounter);
  stress = readStress();
  node = create_tree(_ownedFields);
  i = 0;
  while (i < stress)
  {
    node1 = tree_add_left(node, _ownedFields);
    node11 = tree_get_parent(node1, _ownedFields);
    node111 = tree_add_right(node11, _ownedFields);
    node1111 = tree_get_parent(node111, _ownedFields);
    i = i + 1;
    node = node1;
    node1 = node11;
    node11 = node111;
    node111 = node1111;
  }
  return 0;
}

void subtreeHelper(struct Node* l, struct Node* r, struct Node* parent, int total, struct OwnedFields* _ownedFields)
{
  if (l == NULL)
  {
    if (r == NULL)
    {
      assert(total == 1);
    }
    else
    {
      assertAcc(_ownedFields, r->_id, 1, "Field access runtime check failed for struct Node.left");
      assertAcc(_ownedFields, r->_id, 2, "Field access runtime check failed for struct Node.right");
      assertAcc(_ownedFields, r->_id, 3, "Field access runtime check failed for struct Node.parent");
      assertAcc(_ownedFields, r->_id, 0, "Field access runtime check failed for struct Node.total");
      assert(r->parent == parent);
      subtreeHelper(r->left, r->right, r, r->total, _ownedFields);
      assert(total == 1 + r->total);
    }
  }
  else
  {
    if (r == NULL)
    {
      assertAcc(_ownedFields, l->_id, 1, "Field access runtime check failed for struct Node.left");
      assertAcc(_ownedFields, l->_id, 2, "Field access runtime check failed for struct Node.right");
      assertAcc(_ownedFields, l->_id, 3, "Field access runtime check failed for struct Node.parent");
      assertAcc(_ownedFields, l->_id, 0, "Field access runtime check failed for struct Node.total");
      assert(l->parent == parent);
      subtreeHelper(l->left, l->right, l, l->total, _ownedFields);
      assert(total == 1 + l->total);
    }
    else
    {
      assertAcc(_ownedFields, r->_id, 1, "Field access runtime check failed for struct Node.left");
      assertAcc(_ownedFields, r->_id, 2, "Field access runtime check failed for struct Node.right");
      assertAcc(_ownedFields, r->_id, 3, "Field access runtime check failed for struct Node.parent");
      assertAcc(_ownedFields, r->_id, 0, "Field access runtime check failed for struct Node.total");
      assert(r->parent == parent);
      subtreeHelper(r->left, r->right, r, r->total, _ownedFields);
      assertAcc(_ownedFields, l->_id, 1, "Field access runtime check failed for struct Node.left");
      assertAcc(_ownedFields, l->_id, 2, "Field access runtime check failed for struct Node.right");
      assertAcc(_ownedFields, l->_id, 3, "Field access runtime check failed for struct Node.parent");
      assertAcc(_ownedFields, l->_id, 0, "Field access runtime check failed for struct Node.total");
      assert(l->parent == parent);
      subtreeHelper(l->left, l->right, l, l->total, _ownedFields);
      assert(total == 1 + l->total + r->total);
    }
  }
}

void tree(struct Node* node, struct OwnedFields* _ownedFields)
{
  if (node == NULL)
  {
    assert(true);
  }
  else
  {
    assertAcc(_ownedFields, node->_id, 1, "Field access runtime check failed for struct Node.left");
    assertAcc(_ownedFields, node->_id, 2, "Field access runtime check failed for struct Node.right");
    assertAcc(_ownedFields, node->_id, 3, "Field access runtime check failed for struct Node.parent");
    assertAcc(_ownedFields, node->_id, 0, "Field access runtime check failed for struct Node.total");
    context(node, node->parent, node->total, _ownedFields);
    subtreeHelper(node->left, node->right, node, node->total, _ownedFields);
  }
}

struct Node* tree_add_left(struct Node* node, struct OwnedFields* _ownedFields)
{
  struct Node* n = NULL;
  struct Node* nodeLeft = NULL;
  tree(node, _ownedFields);
  if (node == NULL)
  {
    return node;
  }
  else
  {
    n = alloc(struct Node);
    n->_id = addStructAcc(_ownedFields, 4);
    assertAcc(_ownedFields, n->_id, 1, "Field access runtime check failed for struct Node.left");
    n->left = NULL;
    assertAcc(_ownedFields, n->_id, 2, "Field access runtime check failed for struct Node.right");
    n->right = NULL;
    assertAcc(_ownedFields, n->_id, 3, "Field access runtime check failed for struct Node.parent");
    n->parent = node;
    assertAcc(_ownedFields, n->_id, 0, "Field access runtime check failed for struct Node.total");
    n->total = 1;
    assertAcc(_ownedFields, node->_id, 1, "Field access runtime check failed for struct Node.left");
    nodeLeft = node->left;
    if (nodeLeft != NULL)
    {
      return node;
    }
    else
    {
      assertAcc(_ownedFields, node->_id, 1, "Field access runtime check failed for struct Node.left");
      node->left = n;
      fixup_ancestors(n, node, 0, 1, _ownedFields);
      return n;
    }
  }
}

struct Node* tree_add_right(struct Node* node, struct OwnedFields* _ownedFields)
{
  struct Node* n = NULL;
  struct Node* nodeRight = NULL;
  tree(node, _ownedFields);
  if (node == NULL)
  {
    return node;
  }
  else
  {
    n = alloc(struct Node);
    n->_id = addStructAcc(_ownedFields, 4);
    assertAcc(_ownedFields, n->_id, 1, "Field access runtime check failed for struct Node.left");
    n->left = NULL;
    assertAcc(_ownedFields, n->_id, 2, "Field access runtime check failed for struct Node.right");
    n->right = NULL;
    assertAcc(_ownedFields, n->_id, 3, "Field access runtime check failed for struct Node.parent");
    n->parent = node;
    assertAcc(_ownedFields, n->_id, 0, "Field access runtime check failed for struct Node.total");
    n->total = 1;
    assertAcc(_ownedFields, node->_id, 2, "Field access runtime check failed for struct Node.right");
    nodeRight = node->right;
    if (nodeRight != NULL)
    {
      return node;
    }
    else
    {
      assertAcc(_ownedFields, node->_id, 2, "Field access runtime check failed for struct Node.right");
      node->right = n;
      fixup_ancestors(n, node, 0, 1, _ownedFields);
      return n;
    }
  }
}

struct Node* tree_get_left(struct Node* node, struct OwnedFields* _ownedFields)
{
  struct Node* left = NULL;
  struct Node* _ = NULL;
  tree(node, _ownedFields);
  if (node == NULL)
  {
    _ = NULL;
    tree(_, _ownedFields);
    return _;
  }
  else
  {
    assertAcc(_ownedFields, node->_id, 1, "Field access runtime check failed for struct Node.left");
    left = node->left;
    if (left != NULL)
    {
    }
    return left;
  }
}

struct Node* tree_get_parent(struct Node* node, struct OwnedFields* _ownedFields)
{
  struct Node* parent = NULL;
  struct Node* _ = NULL;
  struct Node* _1 = NULL;
  tree(node, _ownedFields);
  if (node == NULL)
  {
    _ = NULL;
    tree(_, _ownedFields);
    return _;
  }
  else
  {
    assertAcc(_ownedFields, node->_id, 3, "Field access runtime check failed for struct Node.parent");
    parent = node->parent;
    if (parent == NULL)
    {
      _1 = NULL;
      tree(_1, _ownedFields);
      return _1;
    }
    else
    {
      context(parent, parent->parent, parent->total, _ownedFields);
      return parent;
    }
  }
}

struct Node* tree_get_right(struct Node* node, struct OwnedFields* _ownedFields)
{
  struct Node* right = NULL;
  struct Node* _ = NULL;
  tree(node, _ownedFields);
  if (node == NULL)
  {
    _ = NULL;
    tree(_, _ownedFields);
    return _;
  }
  else
  {
    assertAcc(_ownedFields, node->_id, 2, "Field access runtime check failed for struct Node.right");
    right = node->right;
    if (right != NULL)
    {
    }
    return right;
  }
}

int tree_get_total(struct Node* node, struct OwnedFields* _ownedFields)
{
  int result = 0;
  tree(node, _ownedFields);
  result = 0;
  if (node == NULL)
  {
  }
  else
  {
    assertAcc(_ownedFields, node->_id, 0, "Field access runtime check failed for struct Node.total");
    result = node->total;
  }
  return result;
}

bool tree_has_left(struct Node* node, struct OwnedFields* _ownedFields)
{
  bool res = false;
  struct Node* left = NULL;
  tree(node, _ownedFields);
  res = false;
  if (node == NULL)
  {
  }
  else
  {
    assertAcc(_ownedFields, node->_id, 1, "Field access runtime check failed for struct Node.left");
    left = node->left;
    res = left != NULL;
  }
  return res;
}

bool tree_has_parent(struct Node* node, struct OwnedFields* _ownedFields)
{
  bool res = false;
  struct Node* parent = NULL;
  tree(node, _ownedFields);
  res = false;
  if (node == NULL)
  {
  }
  else
  {
    assertAcc(_ownedFields, node->_id, 3, "Field access runtime check failed for struct Node.parent");
    parent = node->parent;
    res = parent != NULL;
  }
  return res;
}

bool tree_has_right(struct Node* node, struct OwnedFields* _ownedFields)
{
  bool res = false;
  struct Node* right = NULL;
  tree(node, _ownedFields);
  res = false;
  if (node == NULL)
  {
  }
  else
  {
    assertAcc(_ownedFields, node->_id, 2, "Field access runtime check failed for struct Node.right");
    right = node->right;
    res = right != NULL;
  }
  return res;
}
